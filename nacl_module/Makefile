VALID_TOOLCHAINS := newlib # glibc pnacl

NACL_SDK_ROOT ?= $(abspath $(CURDIR)/../..)i
include $(NACL_SDK_ROOT)/tools/common.mk

TARGET = hd_wallet
LIBS = $(DEPS) ppapi_cpp ppapi pthread crypto jsoncpp

CFLAGS = -Wall -Wextra

SOURCES = \
  api.cc \
  base58.cc \
  blockchain.cc \
  credentials.cc \
  crypto.cc \
  node.cc \
  node_factory.cc \
  secp256k1.cc \
  tx.cc \
  types.cc \
  wallet.cc \
  dispatcher.cc

# Build rules generated by macros from common.mk:
$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CFLAGS))))

ifeq ($(CONFIG),Release)
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))

all: force_look
	cp $(OUTBASE)/newlib/Release/$(TARGET).nmf $(ZIPBASE)/newlib/Release
	cp $(OUTBASE)/newlib/Release/$(TARGET)_arm.nexe $(ZIPBASE)/newlib/Release
	cp $(OUTBASE)/newlib/Release/$(TARGET)_x86_32.nexe $(ZIPBASE)/newlib/Release
	cp $(OUTBASE)/newlib/Release/$(TARGET)_x86_64.nexe $(ZIPBASE)/newlib/Release

force_look:
	true
