# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR ?= ../../../tools/gtest-1.7.0

# Where to find user code.
USER_DIR = .

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
#  -ffunction-sections -fdata-sections
BE_LOUD ?= 0
ifeq ($(BE_LOUD), 1)
  CPPFLAGS += -DBE_LOUD
  CXXFLAGS += -DBE_LOUD
endif
CPPFLAGS += -DDEBUG=1 -ggdb -isystem $(GTEST_DIR)/include -DBUILDING_FOR_TEST=1

# Flags passed to the C++ compiler.
CXXFLAGS += -ggdb -Wall -Wextra -pthread

TESTS = all_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o *.d

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

SOURCES = \
  api.cc \
  api_unittest.cc \
  base58.cc \
  base58_unittest.cc \
  blockchain.cc \
  blockchain_unittest.cc \
  credentials.cc \
  credentials_unittest.cc \
  crypto.cc \
  crypto_unittest.cc \
  encrypting_node_factory.cc \
  mnemonic.cc \
  node.cc \
  node_factory.cc \
  node_unittest.cc \
  scrypt/crypto_scrypt-ref.cc \
  secp256k1.cc \
  tx.cc \
  tx_unittest.cc \
  types.cc \
  wallet.cc \
  wallet_unittest.cc

OBJS = $(SOURCES:.cc=.o)
LIBS = -lpthread -lssl -lcrypto -ljsoncpp
OUT = out/x86

-include $(OBJS:.o=.d)

.PRECIOUS: $(TESTS)

%.o : %.cc
	$(CC) -MM $(CFLAGS) $(CPPFLAGS) $*.cc > $*.d
	$(CC) -c $(CFLAGS) $(CPPFLAGS) $< -o $@

# -Wl,--static -Wl,--gc-sections -Wl,--print-gc-sections
all_unittest : $(OBJS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LIBS)
	$(USER_DIR)/$@

blockchain_unittest : gtest_main.a blockchain_unittest.cc \
                      base58.cc \
                      blockchain.cc \
                      crypto.cc \
                      secp256k1.cc \
                      tx.cc \
                      types.cc \
                      #
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@ $(LIBS)
	$(USER_DIR)/$@
